{"version":3,"sources":["StudentCam.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StudentCam","props","capture","block","refs","webcam","getScreenshot","split","contentType","realData","blob","b64toBlob","formDataToUpload","FormData","append","set","state","username","toString","axios","post","headers","Guid","create","imageData","interval","b64Data","sliceSize","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","setInterval","console","log","audio","ref","screenshotFormat","mirrored","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAcaA,EAAb,kDACI,WAAYC,GAAc,IAAD,8BACvB,cAAMA,IAyCRC,QAAU,WACR,IACMC,EADU,EAAKC,KAAKC,OAAeC,gBACpBC,MAAM,KAErBC,EAAcL,EAAM,GAAGI,MAAM,KAAK,GAGlCE,EAAWN,EAAM,GAAGI,MAAM,KAAK,GAG/BG,EAAO,EAAKC,UAAUF,EAAUD,GAGhCI,EAAmB,IAAIC,SAC3BD,EAAiBE,OAAO,QAASJ,GACjCE,EAAiBG,IAAI,OAAQ,EAAKC,MAAMC,SAASC,YACjDC,IACGC,KAAK,gDACNR,EACA,CACES,QAAS,CACP,eAAgB,0BA7DxB,EAAKL,MAAQ,CACTC,SAAUK,OAAKC,SACfC,UAAY,KACZC,SAAU,KALS,EAD7B,sDAmBcC,EAAkBlB,GAAgD,IAA7BmB,EAA4B,uDAAX,IAC9DnB,EAAcA,GAAe,GAC7BmB,EAAYA,GAAa,IAKzB,IAHA,IAAIC,EAAiBC,KAAKH,GACtBI,EAAa,GAERC,EAAS,EAAGA,EAASH,EAAeI,OAAQD,GAAUJ,EAAW,CAItE,IAHA,IAAIM,EAAQL,EAAeK,MAAMF,EAAQA,EAASJ,GAE9CO,EAAc,IAAIC,MAAMF,EAAMD,QACzBI,EAAI,EAAGA,EAAIH,EAAMD,OAAQI,IAC9BF,EAAYE,GAAKH,EAAMI,WAAWD,GAGtC,IAAIE,EAAY,IAAIC,WAAWL,GAE/BJ,EAAWU,KAAKF,GAGtB,IAAI5B,EAAO,IAAI+B,KAAKX,EAAY,CAACY,KAAMlC,IACvC,OAAOE,IAxCX,0CAsEwB,IAAD,OAEfiC,aAAY,WACRC,QAAQC,IAAI,YACZ,EAAK3C,YAEN,OA5EX,+BA+EM,OACE,kBAAC,IAAD,CACI4C,OAAO,EACPC,IAAM,SACNC,iBAAiB,aACjBC,UAAY,QApFxB,GAAgCC,IAAMC,WCCvBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.a0714855.chunk.js","sourcesContent":["import React from 'react';\nimport Webcam from 'react-webcam';\nimport { Guid } from 'guid-typescript';\nimport axios from 'axios'\n\ninterface Props {\n}\n\ninterface State {\n    username: Guid;\n    imageData: any;\n    interval: number;\n}\n\nexport class StudentCam extends React.Component<Props, State>{\n    constructor(props: Props){\n      super(props);\n      this.state = {\n          username: Guid.create(),\n          imageData : null,\n          interval: 3000\n      };\n    }\n\n    /**\n     * Convert a base64 string in a Blob according to the data and contentType.\n     * \n     * @param b64Data {String} Pure base64 string without contentType\n     * @param contentType {String} the content type of the file i.e (image/jpeg - image/png - text/plain)\n     * @param sliceSize {Int} SliceSize to process the byteCharacters\n     * @see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n     * @return Blob\n     */\n    b64toBlob(b64Data : string, contentType : any, sliceSize: any = 512) : Blob{\n      contentType = contentType || '';\n      sliceSize = sliceSize || 512;\n\n      var byteCharacters = atob(b64Data);\n      var byteArrays = [];\n\n      for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n          var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n          var byteNumbers = new Array(slice.length);\n          for (var i = 0; i < slice.length; i++) {\n              byteNumbers[i] = slice.charCodeAt(i);\n          }\n\n          var byteArray = new Uint8Array(byteNumbers);\n\n          byteArrays.push(byteArray);\n      }\n\n    var blob = new Blob(byteArrays, {type: contentType});\n    return blob;\n    }\n\n    capture = () => {\n      const imgSrc = (this.refs.webcam as any).getScreenshot();\n        var block = imgSrc.split(\";\");\n        // Get the content type of the image\n        var contentType = block[0].split(\":\")[1];// In this case \"image/gif\"\n        // var contentType = 'image/jpeg'\n        // get the real base64 content of the file\n        var realData = block[1].split(\",\")[1];// In this case \"R0lGODlhPQBEAPeoAJosM....\"\n\n        // Convert it to a blob to upload\n        var blob = this.b64toBlob(realData, contentType);\n\n        // Create a FormData and append the file with \"image\" as parameter name\n        var formDataToUpload = new FormData();\n        formDataToUpload.append(\"image\", blob);\n        formDataToUpload.set(\"user\", this.state.username.toString());\n        axios\n          .post('http://localhost:7071/api/faceEmotionFunction',\n          formDataToUpload,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }\n          )\n        // console.log(imgSrc);\n    }\n    componentDidMount(){\n        // const webcamRef = React.useRef(null);\n        setInterval(()=>{\n            console.log(\"abhishek\");\n            this.capture();\n\n        }, 3000);\n    }\n    render(){\n      return(\n        <Webcam \n            audio={false}\n            ref = 'webcam'\n            screenshotFormat=\"image/jpeg\"\n            mirrored = {true}\n            />\n      );\n    }\n  }\n  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Webcam from 'react-webcam';\nimport { StudentCam } from './StudentCam';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StudentCam />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}